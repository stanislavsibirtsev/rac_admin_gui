from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QPushButton, QTextEdit, QGridLayout, QScrollArea,
                             QSizePolicy, QMessageBox, QTabWidget, QSplitter,
                             QGroupBox, QLabel, QLineEdit)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont, QIcon
import sys
import os

from core.rac_commands import RACCommands
from core.logger import RACLogger
from core.command_executor import RACCommandExecutor
from core.service_manager import ServiceManager
from core.variable_manager import VariableManager
from ui.command_dialogs import CommandDialog
from ui.variables_dialog import VariablesDialog


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.rac_commands = RACCommands.get_all_commands()
        self.logger = RACLogger()
        self.variable_manager = VariableManager()
        self.command_executor = RACCommandExecutor("rac.exe", self.logger, self.variable_manager)
        self.service_manager = ServiceManager()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.ras_service_name = "1C:Enterprise 8.3 Remote Server"

        self.init_ui()
        self.setup_connections()
        self.start_service_monitor()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("RAC Admin GUI - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ 1–°")
        self.setMinimumSize(1920, 1080)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout(central_widget)

        # –°–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–µ–∑–∏–Ω–æ–≤–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
        splitter = QSplitter(Qt.Orientation.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        left_panel = self.create_buttons_panel()
        splitter.addWidget(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ª–æ–≥–∞–º–∏
        right_panel = self.create_logs_panel()
        splitter.addWidget(right_panel)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        splitter.setSizes([600, 1300])

        main_layout.addWidget(splitter)

    def create_buttons_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥"""
        panel = QWidget()
        layout = QVBoxLayout(panel)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QTextEdit()
        title_label.setHtml("<h2>–†–µ–∂–∏–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è RAC</h2>")
        title_label.setReadOnly(True)
        title_label.setMaximumHeight(60)
        layout.addWidget(title_label)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª—É–∂–±–æ–π
        service_panel = self.create_service_panel()
        layout.addWidget(service_panel)

        # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        vars_button = QPushButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        vars_button.setMinimumHeight(40)
        vars_button.clicked.connect(self.open_variables_dialog)
        layout.addWidget(vars_button)

        # Scroll area –¥–ª—è –∫–Ω–æ–ø–æ–∫
        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        scroll_layout = QGridLayout(scroll_widget)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
        modes = list(self.rac_commands.keys())
        row, col = 0, 0
        max_cols = 2

        for mode in modes:
            button = QPushButton(self.get_mode_display_name(mode))
            button.setMinimumHeight(50)
            button.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
            button.setProperty("mode", mode)
            button.clicked.connect(self.on_mode_button_clicked)

            scroll_layout.addWidget(button, row, col)

            col += 1
            if col >= max_cols:
                col = 0
                row += 1

        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        layout.addWidget(scroll_area)

        return panel

    def create_service_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª—É–∂–±–æ–π RAS"""
        panel = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–æ–π RAS")
        layout = QVBoxLayout(panel)

        # –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã
        status_layout = QHBoxLayout()
        self.service_status_label = QLabel("–ü—Ä–æ–≤–µ—Ä–∫–∞...")
        self.service_status_indicator = QLabel("‚ö´")
        self.service_status_indicator.setFont(QFont("Arial", 16))

        status_layout.addWidget(self.service_status_indicator)
        status_layout.addWidget(self.service_status_label)
        status_layout.addStretch()

        # –ü–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏ —Å–ª—É–∂–±—ã
        service_name_layout = QHBoxLayout()
        service_name_layout.addWidget(QLabel("–ò–º—è —Å–ª—É–∂–±—ã:"))
        self.service_name_edit = QLineEdit(self.ras_service_name)
        service_name_layout.addWidget(self.service_name_edit)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        self.start_service_btn = QPushButton("‚ñ∂ –ó–∞–ø—É—Å–∫")
        self.stop_service_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞")
        self.restart_service_btn = QPushButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
        self.refresh_status_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")

        self.start_service_btn.clicked.connect(self.start_ras_service)
        self.stop_service_btn.clicked.connect(self.stop_ras_service)
        self.restart_service_btn.clicked.connect(self.restart_ras_service)
        self.refresh_status_btn.clicked.connect(self.check_service_status)

        buttons_layout.addWidget(self.start_service_btn)
        buttons_layout.addWidget(self.stop_service_btn)
        buttons_layout.addWidget(self.restart_service_btn)
        buttons_layout.addWidget(self.refresh_status_btn)

        layout.addLayout(service_name_layout)
        layout.addLayout(status_layout)
        layout.addLayout(buttons_layout)

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.check_service_status()

        return panel

    def create_logs_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –ª–æ–≥–∞–º–∏"""
        panel = QWidget()
        layout = QVBoxLayout(panel)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QTextEdit()
        title_label.setHtml("<h2>–ñ—É—Ä–Ω–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥</h2>")
        title_label.setReadOnly(True)
        title_label.setMaximumHeight(40)
        layout.addWidget(title_label)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_text_edit = QTextEdit()
        self.log_text_edit.setReadOnly(True)
        self.log_text_edit.setFont(QFont("Courier New", 9))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        log_controls_layout = QHBoxLayout()
        clear_button = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏")

        clear_button.clicked.connect(self.clear_logs)
        save_button.clicked.connect(self.save_logs)

        log_controls_layout.addWidget(clear_button)
        log_controls_layout.addWidget(save_button)
        log_controls_layout.addStretch()

        layout.addLayout(log_controls_layout)
        layout.addWidget(self.log_text_edit)

        return panel

    def get_mode_display_name(self, mode: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞"""
        names = {
            "help": "üìñ –°–ø—Ä–∞–≤–∫–∞",
            "agent": "üñ• –ê–≥–µ–Ω—Ç –∫–ª–∞—Å—Ç–µ—Ä–∞",
            "cluster": "üè¢ –ö–ª–∞—Å—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤",
            "manager": "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞",
            "server": "‚öô –†–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä",
            "process": "üîÑ –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å",
            "service": "üîß –°–µ—Ä–≤–∏—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            "infobase": "üóÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞",
            "connection": "üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            "session": "üë• –°–µ–∞–Ω—Å—ã",
            "lock": "üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
            "rule": "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
            "profile": "üõ° –ü—Ä–æ—Ñ–∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "counter": "üìä –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤",
            "limit": "üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"
        }
        return names.get(mode, mode)

    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        import logging
        from PyQt6.QtCore import QObject, pyqtSignal

        class LogHandler(QObject, logging.Handler):
            log_signal = pyqtSignal(str)

            def __init__(self):
                super().__init__()
                logging.Handler.__init__(self)
                self.setFormatter(logging.Formatter('%(message)s'))

            def emit(self, record):
                msg = self.format(record)
                self.log_signal.emit(msg)

        self.log_handler = LogHandler()
        self.log_handler.log_signal.connect(self.log_text_append)
        self.logger.logger.addHandler(self.log_handler)

    def start_service_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª—É–∂–±—ã"""
        self.service_timer = QTimer()
        self.service_timer.timeout.connect(self.check_service_status)
        self.service_timer.start(5000)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    def check_service_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã"""
        service_name = self.service_name_edit.text().strip() or self.ras_service_name
        is_running, status_message = self.service_manager.get_service_status(service_name)

        if is_running:
            self.service_status_indicator.setText("üü¢")
            self.service_status_label.setText(f"–ó–∞–ø—É—â–µ–Ω–∞: {service_name}")
            self.start_service_btn.setEnabled(False)
            self.stop_service_btn.setEnabled(True)
            self.restart_service_btn.setEnabled(True)
        else:
            self.service_status_indicator.setText("üî¥")
            self.service_status_label.setText(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {status_message}")
            self.start_service_btn.setEnabled(True)
            self.stop_service_btn.setEnabled(False)
            self.restart_service_btn.setEnabled(False)

    def start_ras_service(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã RAS"""
        service_name = self.service_name_edit.text().strip() or self.ras_service_name
        success, message = self.service_manager.start_service(service_name)

        if success:
            self.logger.log_info(f"–°–ª—É–∂–±–∞ {service_name} –∑–∞–ø—É—â–µ–Ω–∞: {message}", "SERVICE")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞:\n{message}")
        else:
            self.logger.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã {service_name}: {message}", "SERVICE")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É:\n{message}")

        self.check_service_status()

    def stop_ras_service(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã RAS"""
        service_name = self.service_name_edit.text().strip() or self.ras_service_name
        success, message = self.service_manager.stop_service(service_name)

        if success:
            self.logger.log_info(f"–°–ª—É–∂–±–∞ {service_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message}", "SERVICE")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n{message}")
        else:
            self.logger.log_error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É–∂–±—ã {service_name}: {message}", "SERVICE")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É–∂–±—É:\n{message}")

        self.check_service_status()

    def restart_ras_service(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã RAS"""
        service_name = self.service_name_edit.text().strip() or self.ras_service_name
        success, message = self.service_manager.restart_service(service_name)

        if success:
            self.logger.log_info(f"–°–ª—É–∂–±–∞ {service_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞: {message}", "SERVICE")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°–ª—É–∂–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞:\n{message}")
        else:
            self.logger.log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã {service_name}: {message}", "SERVICE")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É:\n{message}")

        self.check_service_status()

    def open_variables_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"""
        dialog = VariablesDialog(self.variable_manager, self)
        dialog.exec()

    def on_mode_button_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–∂–∏–º–∞"""
        button = self.sender()
        mode = button.property("mode")

        if mode in self.rac_commands:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
            service_name = self.service_name_edit.text().strip() or self.ras_service_name
            is_running, _ = self.service_manager.get_service_status(service_name)

            if not is_running and mode != "help":
                reply = QMessageBox.question(
                    self,
                    "–°–ª—É–∂–±–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞",
                    f"–°–ª—É–∂–±–∞ RAS –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ö–æ–º–∞–Ω–¥—ã {mode} –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                )
                if reply == QMessageBox.StandardButton.No:
                    return

            dialog = CommandDialog(mode, self.rac_commands[mode], self.command_executor, self.logger, self)
            dialog.command_executed.connect(self.on_command_executed)
            dialog.show()

    def on_command_executed(self, success: bool, command: str, output: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        if success:
            self.log_text_append(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {command}")
            self.log_text_append(f"–í—ã–≤–æ–¥:\n{output}\n" + "=" * 80 + "\n")
        else:
            self.log_text_append(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
            self.log_text_append(f"–û—à–∏–±–∫–∞:\n{output}\n" + "=" * 80 + "\n")

    def log_text_append(self, text: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ª–æ–≥"""
        self.log_text_edit.append(text)
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∏–∑—É
        cursor = self.log_text_edit.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.log_text_edit.setTextCursor(cursor)

    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_text_edit.clear()

    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        pass